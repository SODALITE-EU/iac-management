tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - modules/openstack/openstack_vm.yaml
  - modules/docker/docker_host.yaml
  - modules/docker/docker_network.yaml
  - modules/docker/docker_registry.yaml
  - modules/docker/docker_component.yaml

topology_template:

  inputs:
    ssh-key-name:
      type: string
    image-name:
      type: string
    openstack-network-name:
      type: string
    security-groups:
      type: string
    flavor-name:
      type: string
    docker-network:
      type: string
    docker-public-registry-url:
      type: string
    postgres_env:
      type: map


  node_templates:

    security-rules-postgresql:
      type: sodalite.nodes.OpenStack.SecurityRules
      properties:
        ports:
          5432_port:
            port_range_max: 5432
            remote_ip_prefix: 0.0.0.0/0
            port_range_min: 5432
            protocol: tcp
        group_name: postgresql
        group_description: Postgresql security group

    postgresql-vm:
      type: sodalite.nodes.OpenStack.VM
      properties:
        name: postgresql
        key_name: { get_input: ssh-key-name }
        image: { get_input: image-name }
        network: { get_input: openstack-network-name }
        security_groups: { get_input: security-groups }
        flavor: { get_input: flavor-name }
        username: centos
      requirements:
        - protected_by: security-rules-postgresql

    docker-host:
      type: sodalite.nodes.DockerHost
      requirements:
        - host: postgresql-vm

    docker-network:
      type: sodalite.nodes.DockerNetwork
      properties:
        name: { get_input: docker-network }
      requirements:
        - host: postgresql-vm
        - dependency: docker-host

    docker-public-registry:
      type: sodalite.nodes.DockerRegistry
      properties:
        docker_registry_url: { get_input: docker-public-registry-url }
      requirements:
        - host: postgresql-vm
        - dependency: docker-host

    postgres-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        image_name: library/postgres:latest
        volumes:
          - "/home/postgres:/var/lib/postgresql/data"
        ports: [ '5432:5432' ]
        alias: postgres
        env: { get_input: postgres_env }
        docker_network_name: { get_property: [ SELF, network, name ] }
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry